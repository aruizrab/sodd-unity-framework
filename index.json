{
  "api/SODD.Editor.Events.EventEditor-1.html": {
    "href": "api/SODD.Editor.Events.EventEditor-1.html",
    "title": "Class EventEditor<T> | SODD Framework | 0.1.0",
    "keywords": "Class EventEditor<T> Namespace SODD.Editor.Events Base class for custom event editors. public abstract class EventEditor<T> : UnityEditor.Editor Type Parameters T The type of payload for the event. Inheritance object EventEditor<T> Derived IntEventEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/SODD.Editor.Events.IntEventEditor.html": {
    "href": "api/SODD.Editor.Events.IntEventEditor.html",
    "title": "Class IntEventEditor | SODD Framework | 0.1.0",
    "keywords": "Class IntEventEditor Namespace SODD.Editor.Events public class IntEventEditor : EventEditor<int> Inheritance object EventEditor<int> IntEventEditor Inherited Members EventEditor<int>.OnInspectorGUI()"
  },
  "api/SODD.Editor.Events.IntEventMenu.html": {
    "href": "api/SODD.Editor.Events.IntEventMenu.html",
    "title": "Class IntEventMenu | SODD Framework | 0.1.0",
    "keywords": "Class IntEventMenu Namespace SODD.Editor.Events public static class IntEventMenu Inheritance object IntEventMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(MenuCommand) public static void Create(MenuCommand command) Parameters command MenuCommand"
  },
  "api/SODD.Editor.Events.html": {
    "href": "api/SODD.Editor.Events.html",
    "title": "Namespace SODD.Editor.Events | SODD Framework | 0.1.0",
    "keywords": "Namespace SODD.Editor.Events Classes EventEditor<T> Base class for custom event editors. IntEventEditor IntEventMenu"
  },
  "api/SODD.Events.Event-1.html": {
    "href": "api/SODD.Events.Event-1.html",
    "title": "Class Event<T> | SODD Framework | 0.1.0",
    "keywords": "Class Event<T> Namespace SODD.Events Represents an abstract event that can be listened to and invoked. public abstract class Event<T> : ScriptableObject, IEvent<T> Type Parameters T The type of the event payload. Inheritance object Event<T> Implements IEvent<T> Derived IntEvent Examples A StringEvent implementation would look like this: public class StringEvent : Event<string> {} Remarks This abstract class serves as the base for all scriptable event implementations. It implements the IEvent<T> interface allowing listeners to subscribe to and unsubscribe from events and provides a method to invoke the event with a specific payload. To create custom scriptable events, inherit from this class and specify the payload type T, it can be any valid Unity type (e.g., int, string, GameObject, etc.). Then, in your derived classes, you can override the necessary methods (if needed) and add more properties or methods that are specific to your requirements. However, the base AddListener, RemoveListener and Invoke methods, already implemented by this abstract class, should be enough to handle basic use cases. Methods AddListener(Action<T>) Adds a listener to the event. public void AddListener(Action<T> listener) Parameters listener Action<T> The listener to add. Invoke(T) Invokes the event and notifies all registered listeners with the specified payload. public void Invoke(T payload) Parameters payload T The payload to pass to the listeners. RemoveListener(Action<T>) Removes the specified listener from the event. public void RemoveListener(Action<T> listener) Parameters listener Action<T> The listener to be removed. See Also IEvent<T>"
  },
  "api/SODD.Events.IEvent-1.html": {
    "href": "api/SODD.Events.IEvent-1.html",
    "title": "Interface IEvent<T> | SODD Framework | 0.1.0",
    "keywords": "Interface IEvent<T> Namespace SODD.Events Represents an event that can be listened to and invoked. public interface IEvent<T> Type Parameters T The type of the event payload. Methods AddListener(Action<T>) Adds a listener to the event. void AddListener(Action<T> listener) Parameters listener Action<T> The listener to add. Invoke(T) Invokes the event and notifies all registered listeners with the specified payload. void Invoke(T payload) Parameters payload T The payload to pass to the listeners. RemoveListener(Action<T>) Removes the specified listener from the event. void RemoveListener(Action<T> listener) Parameters listener Action<T> The listener to be removed."
  },
  "api/SODD.Events.IntEvent.html": {
    "href": "api/SODD.Events.IntEvent.html",
    "title": "Class IntEvent | SODD Framework | 0.1.0",
    "keywords": "Class IntEvent Namespace SODD.Events A ScriptableObject that represents an event carrying an integer payload. public sealed class IntEvent : Event<int>, IEvent<int> Inheritance object Event<int> IntEvent Implements IEvent<int> Inherited Members Event<int>.AddListener(Action<int>) Event<int>.RemoveListener(Action<int>) Event<int>.Invoke(int) See Also Event<T>"
  },
  "api/SODD.Events.html": {
    "href": "api/SODD.Events.html",
    "title": "Namespace SODD.Events | SODD Framework | 0.1.0",
    "keywords": "Namespace SODD.Events Classes Event<T> Represents an abstract event that can be listened to and invoked. IntEvent A ScriptableObject that represents an event carrying an integer payload. Interfaces IEvent<T> Represents an event that can be listened to and invoked."
  },
  "api/SODD.Listeners.EventListener-1.html": {
    "href": "api/SODD.Listeners.EventListener-1.html",
    "title": "Class EventListener<T> | SODD Framework | 0.1.0",
    "keywords": "Class EventListener<T> Namespace SODD.Listeners Represents an abstract component that listens for events of a specific type T and triggers UnityEvents in response. public abstract class EventListener<T> : MonoBehaviour, IEventListener<T> Type Parameters T The type of the event payload. Inheritance object EventListener<T> Implements IEventListener<T> Examples A StringEvent Listener implementation would look like this: public class StringEventListener : EventListener<string> {} Remarks This abstract class provides a foundation for creating scriptable event listeners. It implements the IEventListener<T> interface and inherits the MonoBehaviour class, simplifying the process of subscribing to and unsubscribing from events based on the MonoBehaviour's lifecycle, ensuring that listeners are only active when the MonoBehaviour is enabled. To create a custom event listener, inherit from this class and specify the payload type T, it can be any valid Unity type (e.g., int, string, GameObject, etc.). In the Unity Editor, attach your new custom event listener component to a GameObject, assign the specific scriptable event to listen to and configure the response through the exposed UnityEvent onEventInvoked. Fields onEventInvoked protected UnityEvent<T> onEventInvoked Field Value UnityEvent<T> targetEvent protected Event<T> targetEvent Field Value Event<T> Methods OnEventInvoked(T) Called when the event is invoked, triggering the assigned UnityEvent. public void OnEventInvoked(T payload) Parameters payload T The payload passed to the event. StartListening(IEvent<T>) Subscribes to the target event. public void StartListening(IEvent<T> @event) Parameters event IEvent<T> The event to start listening to. StopListening(IEvent<T>) Unsubscribes from the target event. public void StopListening(IEvent<T> @event) Parameters event IEvent<T> The event to stop listening to. See Also IEventListener<T> Event<T> IEvent<T>"
  },
  "api/SODD.Listeners.IEventListener-1.html": {
    "href": "api/SODD.Listeners.IEventListener-1.html",
    "title": "Interface IEventListener<T> | SODD Framework | 0.1.0",
    "keywords": "Interface IEventListener<T> Namespace SODD.Listeners Represents a listener for an event of type T. public interface IEventListener<T> Type Parameters T The type of the event payload. Methods OnEventInvoked(T) Defines a method that is called when an event is invoked. void OnEventInvoked(T payload) Parameters payload T The payload passed to the event. StartListening(IEvent<T>) Starts listening to the specified event by adding the supplied event listener. void StartListening(IEvent<T> @event) Parameters event IEvent<T> The event to listen to. Remarks This method adds the OnEventInvoked(T) method as a listener to the specified event, which will be invoked whenever the event is triggered. StopListening(IEvent<T>) Stops listening to an event. void StopListening(IEvent<T> @event) Parameters event IEvent<T> The event to stop listening to."
  },
  "api/SODD.Listeners.html": {
    "href": "api/SODD.Listeners.html",
    "title": "Namespace SODD.Listeners | SODD Framework | 0.1.0",
    "keywords": "Namespace SODD.Listeners Classes EventListener<T> Represents an abstract component that listens for events of a specific type T and triggers UnityEvents in response. Interfaces IEventListener<T> Represents a listener for an event of type T."
  },
  "api/SODD.Tests.Runtime.Events.EventTest.html": {
    "href": "api/SODD.Tests.Runtime.Events.EventTest.html",
    "title": "Class EventTest | SODD Framework | 0.1.0",
    "keywords": "Class EventTest Namespace SODD.Tests.Runtime.Events public class EventTest Inheritance object EventTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Event_InvokesListenerWithCorrectValue() public void Event_InvokesListenerWithCorrectValue() Event_RemoveListener_StopsReceivingEvents() public void Event_RemoveListener_StopsReceivingEvents() SetUp() public void SetUp()"
  },
  "api/SODD.Tests.Runtime.Events.IntEventTests.html": {
    "href": "api/SODD.Tests.Runtime.Events.IntEventTests.html",
    "title": "Class IntEventTests | SODD Framework | 0.1.0",
    "keywords": "Class IntEventTests Namespace SODD.Tests.Runtime.Events public class IntEventTests Inheritance object IntEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IntEvent_InvokesListenerWithCorrectValue() public void IntEvent_InvokesListenerWithCorrectValue() IntEvent_ListenerCanBeRemoved() public void IntEvent_ListenerCanBeRemoved() SetUp() public void SetUp() TearDown() public void TearDown()"
  },
  "api/SODD.Tests.Runtime.Events.html": {
    "href": "api/SODD.Tests.Runtime.Events.html",
    "title": "Namespace SODD.Tests.Runtime.Events | SODD Framework | 0.1.0",
    "keywords": "Namespace SODD.Tests.Runtime.Events Classes EventTest IntEventTests"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| SODD Framework | 0.1.0",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| SODD Framework | 0.1.0",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| SODD Framework | 0.1.0",
    "keywords": "MIT License Copyright (c) 2024 Alex Ruiz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "sodd-unity-framework | SODD Framework | 0.1.0",
    "keywords": "sodd-unity-framework A ScriptableObject Driven Development (SODD) Framework for Unity"
  }
}