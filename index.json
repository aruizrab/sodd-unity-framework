{
  "api/SODD.Attributes.OnValueChangedAttribute.html": {
    "href": "api/SODD.Attributes.OnValueChangedAttribute.html",
    "title": "Class OnValueChangedAttribute | SODD Framework | 1.0.0",
    "keywords": "Class OnValueChangedAttribute Namespace SODD.Attributes Calls the specified method when the associated field's value is changed in the Unity Editor. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class OnValueChangedAttribute : PropertyAttribute Inheritance object OnValueChangedAttribute Examples using UnityEngine; using SODD.Attributes; public class Example : MonoBehaviour { [OnValueChanged(\"OnHealthChanged\")] public int health; private void OnHealthChanged() { Debug.Log(\"Health value changed to: \" + health); } } This example demonstrates the attribute applied to a health field, where any change in the editor will automatically call the OnHealthChanged method to handle related updates or logic. Remarks This attribute is designed to automatically invoke a method when a serialized field's value is updated. It is primarily used within the SODD Framework to log changes of scriptable variable values in the console when their debug option is enabled. The method specified by the attribute should have no parameters and exist within the same class as the field it is associated with. Constructors OnValueChangedAttribute(string) public OnValueChangedAttribute(string methodName) Parameters methodName string Fields MethodName public readonly string MethodName Field Value string"
  },
  "api/SODD.Attributes.html": {
    "href": "api/SODD.Attributes.html",
    "title": "Namespace SODD.Attributes | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Attributes Classes OnValueChangedAttribute Calls the specified method when the associated field's value is changed in the Unity Editor."
  },
  "api/SODD.Collections.AudioClipCollection.html": {
    "href": "api/SODD.Collections.AudioClipCollection.html",
    "title": "Class AudioClipCollection | SODD Framework | 1.0.0",
    "keywords": "Class AudioClipCollection Namespace SODD.Collections Represents a scriptable collection that stores AudioClip objects. public sealed class AudioClipCollection : Collection<AudioClip>, IList<AudioClip>, ICollection<AudioClip>, IEnumerable<AudioClip>, IEnumerable Inheritance object Collection<AudioClip> AudioClipCollection Implements IList<AudioClip> ICollection<AudioClip> IEnumerable<AudioClip> IEnumerable Inherited Members Collection<AudioClip>.OnItemAdded Collection<AudioClip>.OnItemRemoved Collection<AudioClip>.GetEnumerator() Collection<AudioClip>.Add(AudioClip) Collection<AudioClip>.Clear() Collection<AudioClip>.Contains(AudioClip) Collection<AudioClip>.CopyTo(AudioClip[], int) Collection<AudioClip>.Remove(AudioClip) Collection<AudioClip>.Count Collection<AudioClip>.IsReadOnly Collection<AudioClip>.IndexOf(AudioClip) Collection<AudioClip>.Insert(int, AudioClip) Collection<AudioClip>.RemoveAt(int) Collection<AudioClip>.this[int] Collection<AudioClip>.GetRandom() Examples Example of using an AudioClipCollection to play audio at a specific location triggered by an event: using UnityEngine; using SODD.Collections; using SODD.Events; public class Example : MonoBehaviour { public AudioClipCollection shotsAudioPool; // Assign this through the Unity Editor. public Vector3Event onShotFired; // Assign this through the Unity Editor. private void OnEnable() { onShotFired.AddListener(OnShotFired); } private void OnDisable() { onShotFired.RemoveListener(OnShotFired); } private void OnShotFired(Vector3 position) { var audioClip = shotsAudioPool.GetRandom(); AudioSource.PlayClipAtPoint(audioClip, position); } } This script demonstrates how an AudioClipCollection can be used in conjunction with a Vector3Event to play a random audio clip from a collection at the position specified by the event. Remarks This collection provides a concrete implementation of the abstract Collection<T> class, specifically for managing audio clips within a game. It facilitates the organized storage and access of sound assets, such as music tracks, sound effects, and other audio samples, which can be manipulated and referenced dynamically throughout the game's lifecycle."
  },
  "api/SODD.Collections.Collection-1.html": {
    "href": "api/SODD.Collections.Collection-1.html",
    "title": "Class Collection<T> | SODD Framework | 1.0.0",
    "keywords": "Class Collection<T> Namespace SODD.Collections Represents an abstract collection of items of type T. public abstract class Collection<T> : ScriptableObject, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the collection. Inheritance object Collection<T> Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Derived AudioClipCollection ComponentCollection GameObjectCollection ObjectCollection ScriptableObjectCollection Examples Example of a GameObject collection implementation: [CreateAssetMenu(menuName = \"My Collections/GameObject Collection\", fileName = nameof(GameObjectCollection)] public class GameObjectCollection : Collection<GameObject> {} Remarks This abstract class provides the foundation for creating scriptable collection implementations. It enables the encapsulation and serialization a list of items, allowing for easy manipulation and reference within the Unity Editor and across different game components. Such collections are beneficial for managing groups of related items, such as inventory items, enemies, or waypoints, in a centralized and organized manner. The collection supports adding and removing items and provides events for tracking these modifications. This functionality facilitates reactive programming patterns, where changes to the collection can trigger corresponding actions or updates within the game. To create a custom collection, inherit from this class and specify the item type T, which can be any type supported by Unity (e.g., GameObject, int, string). Fields OnItemAdded Event triggered when an item is added to the collection. public GenericEvent<T> OnItemAdded Field Value GenericEvent<T> OnItemRemoved Event triggered when an item is removed from the collection. public GenericEvent<T> OnItemRemoved Field Value GenericEvent<T> Properties Count Gets the number of elements contained in the collection. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the collection is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value T The element at the specified index. Methods Add(T) Adds an item to the collection, triggering the OnItemAdded event. public void Add(T item) Parameters item T The item to add to the collection. Clear() Removes all items from the collection, triggering the OnItemRemoved event for each item. public void Clear() Contains(T) Determines whether the collection contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the collection. Returns bool true if item is found in the collection; otherwise, false. CopyTo(T[], int) Copies the elements of the collection to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from the collection. arrayIndex int The zero-based index in array at which copying begins. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator for the collection of items. GetRandom() Returns a random item from the collection. public T GetRandom() Returns T A randomly selected item from the collection. IndexOf(T) Retrieves the index of a specific item in the collection. public int IndexOf(T item) Parameters item T The item to locate in the collection. Returns int The index of the item if found in the collection; otherwise, -1. Insert(int, T) Inserts an item at the specified index in the collection. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The item to insert. Remove(T) Removes the first occurrence of a specific object from the collection, triggering the OnItemRemoved event. public bool Remove(T item) Parameters item T The item to remove from the collection. Returns bool true if item was successfully removed from the collection; otherwise, false. RemoveAt(int) Removes the item at the specified index from the collection. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove."
  },
  "api/SODD.Collections.ComponentCollection.html": {
    "href": "api/SODD.Collections.ComponentCollection.html",
    "title": "Class ComponentCollection | SODD Framework | 1.0.0",
    "keywords": "Class ComponentCollection Namespace SODD.Collections Represents a scriptable collection that stores Unity Components. public sealed class ComponentCollection : Collection<Component>, IList<Component>, ICollection<Component>, IEnumerable<Component>, IEnumerable Inheritance object Collection<Component> ComponentCollection Implements IList<Component> ICollection<Component> IEnumerable<Component> IEnumerable Inherited Members Collection<Component>.OnItemAdded Collection<Component>.OnItemRemoved Collection<Component>.GetEnumerator() Collection<Component>.Add(Component) Collection<Component>.Clear() Collection<Component>.Contains(Component) Collection<Component>.CopyTo(Component[], int) Collection<Component>.Remove(Component) Collection<Component>.Count Collection<Component>.IsReadOnly Collection<Component>.IndexOf(Component) Collection<Component>.Insert(int, Component) Collection<Component>.RemoveAt(int) Collection<Component>.this[int] Collection<Component>.GetRandom() Examples Example of using ComponentCollection to manage explosives in a game: public class Detonator : MonoBehaviour { public ComponentCollection placedExplosives; // Assign this via the Unity Editor. public VoidEvent onDetonateExplosives; private void OnEnable() { onDetonateExplosives.AddListener(DetonateExplosives); } private void OnDisable() { onDetonateExplosives.RemoveListener(DetonateExplosives); } private void DetonateExplosives(Void o) { foreach (var component in placedExplosives) { var explosive = (Explosive) component; explosive.Detonate(); } placedExplosives.Clear(); } } This script shows how explosives can dynamically add themselves to the 'placedExplosives' collection when instantiated and how a detonator can trigger their detonation without needing to directly gather or reference individual explosives. This allows the detonator to operate independently of the explosives' management. Remarks This collection provides a concrete implementation of the abstract Collection<T> class, specifically designed for managing Unity Components. It enables the structured and dynamic management of components within a game, facilitating operations like adding, removing, or iterating over components without requiring direct management by other objects. An essential use of this collection is in scenarios where components need to be managed independently of the objects that use them, enhancing modularity and reducing coupling in game architecture."
  },
  "api/SODD.Collections.GameObjectCollection.html": {
    "href": "api/SODD.Collections.GameObjectCollection.html",
    "title": "Class GameObjectCollection | SODD Framework | 1.0.0",
    "keywords": "Class GameObjectCollection Namespace SODD.Collections Represents a collection that stores GameObjects. public sealed class GameObjectCollection : Collection<GameObject>, IList<GameObject>, ICollection<GameObject>, IEnumerable<GameObject>, IEnumerable Inheritance object Collection<GameObject> GameObjectCollection Implements IList<GameObject> ICollection<GameObject> IEnumerable<GameObject> IEnumerable Inherited Members Collection<GameObject>.OnItemAdded Collection<GameObject>.OnItemRemoved Collection<GameObject>.GetEnumerator() Collection<GameObject>.Add(GameObject) Collection<GameObject>.Clear() Collection<GameObject>.Contains(GameObject) Collection<GameObject>.CopyTo(GameObject[], int) Collection<GameObject>.Remove(GameObject) Collection<GameObject>.Count Collection<GameObject>.IsReadOnly Collection<GameObject>.IndexOf(GameObject) Collection<GameObject>.Insert(int, GameObject) Collection<GameObject>.RemoveAt(int) Collection<GameObject>.this[int] Collection<GameObject>.GetRandom() See Also Collection<T>"
  },
  "api/SODD.Collections.ObjectCollection.html": {
    "href": "api/SODD.Collections.ObjectCollection.html",
    "title": "Class ObjectCollection | SODD Framework | 1.0.0",
    "keywords": "Class ObjectCollection Namespace SODD.Collections Represents a collection that stores Objects. public sealed class ObjectCollection : Collection<Object>, IList<Object>, ICollection<Object>, IEnumerable<Object>, IEnumerable Inheritance object Collection<Object> ObjectCollection Implements IList<Object> ICollection<Object> IEnumerable<Object> IEnumerable Inherited Members Collection<Object>.OnItemAdded Collection<Object>.OnItemRemoved Collection<Object>.GetEnumerator() Collection<Object>.Add(Object) Collection<Object>.Clear() Collection<Object>.Contains(Object) Collection<Object>.CopyTo(Object[], int) Collection<Object>.Remove(Object) Collection<Object>.Count Collection<Object>.IsReadOnly Collection<Object>.IndexOf(Object) Collection<Object>.Insert(int, Object) Collection<Object>.RemoveAt(int) Collection<Object>.this[int] Collection<Object>.GetRandom() See Also Collection<T>"
  },
  "api/SODD.Collections.ScriptableObjectCollection.html": {
    "href": "api/SODD.Collections.ScriptableObjectCollection.html",
    "title": "Class ScriptableObjectCollection | SODD Framework | 1.0.0",
    "keywords": "Class ScriptableObjectCollection Namespace SODD.Collections Represents a collection that stores ScriptableObjects. public sealed class ScriptableObjectCollection : Collection<ScriptableObject>, IList<ScriptableObject>, ICollection<ScriptableObject>, IEnumerable<ScriptableObject>, IEnumerable Inheritance object Collection<ScriptableObject> ScriptableObjectCollection Implements IList<ScriptableObject> ICollection<ScriptableObject> IEnumerable<ScriptableObject> IEnumerable Inherited Members Collection<ScriptableObject>.OnItemAdded Collection<ScriptableObject>.OnItemRemoved Collection<ScriptableObject>.GetEnumerator() Collection<ScriptableObject>.Add(ScriptableObject) Collection<ScriptableObject>.Clear() Collection<ScriptableObject>.Contains(ScriptableObject) Collection<ScriptableObject>.CopyTo(ScriptableObject[], int) Collection<ScriptableObject>.Remove(ScriptableObject) Collection<ScriptableObject>.Count Collection<ScriptableObject>.IsReadOnly Collection<ScriptableObject>.IndexOf(ScriptableObject) Collection<ScriptableObject>.Insert(int, ScriptableObject) Collection<ScriptableObject>.RemoveAt(int) Collection<ScriptableObject>.this[int] Collection<ScriptableObject>.GetRandom() See Also Collection<T>"
  },
  "api/SODD.Collections.html": {
    "href": "api/SODD.Collections.html",
    "title": "Namespace SODD.Collections | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Collections Classes AudioClipCollection Represents a scriptable collection that stores AudioClip objects. Collection<T> Represents an abstract collection of items of type T. ComponentCollection Represents a scriptable collection that stores Unity Components. GameObjectCollection Represents a collection that stores GameObjects. ObjectCollection Represents a collection that stores Objects. ScriptableObjectCollection Represents a collection that stores ScriptableObjects."
  },
  "api/SODD.Core.Logger.html": {
    "href": "api/SODD.Core.Logger.html",
    "title": "Class Logger | SODD Framework | 1.0.0",
    "keywords": "Class Logger Namespace SODD.Core Provides utility functions for logging in the Unity Editor. public static class Logger Inheritance object Logger Methods LogAsset(Object, string) Logs a message associated with a specific Unity asset in the console, including a clickable link to the asset in the editor. public static void LogAsset(Object asset, string message) Parameters asset Object The asset related to the message. message string The message to log. Examples Example of logging an asset-related message: // Assuming 'exampleAsset' is a Unity asset, such as a ScriptableObject Logger.LogAsset(exampleAsset, \"This is a test message for logging purposes.\"); This will output a log message in the Unity console with a clickable link to 'exampleAsset'. Remarks This method enhances debugging and logging in the Unity Editor by providing a direct link to the asset involved, making it easier to identify and access assets directly from the console log. Only available in the Unity Editor."
  },
  "api/SODD.Core.Void.html": {
    "href": "api/SODD.Core.Void.html",
    "title": "Struct Void | SODD Framework | 1.0.0",
    "keywords": "Struct Void Namespace SODD.Core Represents a type that signifies the absence of any value. [Serializable] public struct Void Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() Remarks The Void type is used as a placeholder type parameter in events where no other data is needed. This allows for the use of generic event handling mechanisms without needing to specify a meaningful type. It is primarily used in the VoidEvent to represent an event that is triggered without any accompanying data. Fields Instance Provides a singleton instance of the Void type, used to represent an empty value. public static readonly Void Instance Field Value Void"
  },
  "api/SODD.Core.html": {
    "href": "api/SODD.Core.html",
    "title": "Namespace SODD.Core | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Core Classes Logger Provides utility functions for logging in the Unity Editor. Structs Void Represents a type that signifies the absence of any value."
  },
  "api/SODD.Events.BoolEvent.html": {
    "href": "api/SODD.Events.BoolEvent.html",
    "title": "Class BoolEvent | SODD Framework | 1.0.0",
    "keywords": "Class BoolEvent Namespace SODD.Events Represents a scriptable event that carries a boolean payload. public sealed class BoolEvent : Event<bool>, IEvent<bool> Inheritance object Event<bool> BoolEvent Implements IEvent<bool> Inherited Members Event<bool>.AddListener(Action<bool>) Event<bool>.RemoveListener(Action<bool>) Event<bool>.Invoke(bool) Examples Below is an example demonstrating how to use a BoolEvent in a script to handle player actions like crouching: public class BoolEventExample : MonoBehaviour { public BoolEvent onCrouch; // Assign the event through the Unity Editor. private void OnEnable() { onCrouch.AddListener(OnCrouch); } private void OnDisable() { onCrouch.RemoveListener(OnCrouch); } private void OnCrouch(bool isCrouching) { if (isCrouching) { // Set movement speed to crouching speed } else { // Set movement speed to normal speed } } } This example illustrates how the onCrouch event can be triggered by various game mechanisms such as player input or specific gameplay triggers like a tutorial session. Importantly, the script is indifferent regarding who triggers the event, focusing solely on responding to the event itself. Remarks This class extends the generic Event<T> class, specifying bool as the type parameter. It is used to create events that need to communicate a boolean value, such as toggling a state, confirming a condition, or triggering binary decisions. Use cases might include signaling game state changes, user interactions that have two states (like on/off switches), or as a response to certain player actions in a game. This class can be instantiated as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.Event-1.html": {
    "href": "api/SODD.Events.Event-1.html",
    "title": "Class Event<T> | SODD Framework | 1.0.0",
    "keywords": "Class Event<T> Namespace SODD.Events Provides a generic base class for scriptable event implementations, enabling events to be defined with specific data types as payloads. public abstract class Event<T> : ScriptableObject, IEvent<T> Type Parameters T The type of the event payload. Inheritance object Event<T> Implements IEvent<T> Derived BoolEvent FloatEvent GameObjectEvent IntEvent StringEvent Vector2Event Vector3Event VoidEvent Examples Definition of a string event implementation: [CreateAssetMenu(menuName = \"My Events/String Event\", fileName = nameof(StringEvent))] public class StringEvent : Event<string> {} Remarks This abstract class serves as the base of the ScriptableObject-based event system provided by the SODD Framework. It allows developers to create custom events that are reusable, and loosely coupled, enhancing the modularity and flexibility of game architecture. It implements the IEvent<T> interface, which includes methods to add or remove listeners, and to invoke the event. This class can be extended to define events with any valid Unity type as a payload, such as int, string, GameObject, etc. The methods AddListener(Action<T>), RemoveListener(Action<T>), and Invoke(T) provided by this class should suffice for basic event handling scenarios. Developers can override these methods in derived classes to tailor event behavior to specific needs. To create custom scriptable events, inherit from this class and specify the payload type T. Fields GenericEvent protected readonly GenericEvent<T> GenericEvent Field Value GenericEvent<T> Methods AddListener(Action<T>) Subscribes a listener to the event, allowing it to be notified when the event is invoked. public void AddListener(Action<T> listener) Parameters listener Action<T> The listener to add. It is a method that matches the signature of the Action<T> delegate, accepting a single parameter of type T. Invoke(T) Triggers the event, notifying all subscribed listeners and passing the specified payload to them. public void Invoke(T payload) Parameters payload T The payload to pass to the listeners. RemoveListener(Action<T>) Unsubscribes a previously added listener from the event, preventing it from being notified when the event is invoked. public void RemoveListener(Action<T> listener) Parameters listener Action<T> The listener to remove. It must be the same instance that was previously added with AddListener(Action<T>)."
  },
  "api/SODD.Events.FloatEvent.html": {
    "href": "api/SODD.Events.FloatEvent.html",
    "title": "Class FloatEvent | SODD Framework | 1.0.0",
    "keywords": "Class FloatEvent Namespace SODD.Events Represents a scriptable event that carries a float payload. public sealed class FloatEvent : Event<float>, IEvent<float> Inheritance object Event<float> FloatEvent Implements IEvent<float> Inherited Members Event<float>.AddListener(Action<float>) Event<float>.RemoveListener(Action<float>) Event<float>.Invoke(float) Examples Below is an example demonstrating how to define and use a FloatEvent to manage game completion percentage: public class GamePercentageManager : MonoBehaviour { public FloatEvent onCompletionIncreased; // Assign this through the Unity Editor. private float _completionPercentage = 0f; private void OnEnable() { onCompletionIncreased.AddListener(OnCompletionIncreased); } private void OnDisable() { onCompletionIncreased.RemoveListener(OnCompletionIncreased); } private void OnCompletionIncreased(float percentage) { _completionPercentage += percentage; Debug.Log(\"Completion percentage increased to: \" + _completionPercentage + \"%\"); } } This example shows how onCompletionIncreased can be used to incrementally update the game's completion percentage as players progress through levels or achieve specific milestones. The event system ensures that the game logic related to tracking completion is decoupled from the actions that trigger progress. Remarks This class extends the generic Event<T> class, specifying float as the type parameter. It is commonly used to handle numerical data that requires precision beyond integers, such as percentages, time durations, distances, or health values. Typical use cases include adjusting player speed, modifying game timers, changing health bars, or any scenario where a change in a floating-point value needs to be communicated across different game components. This class can be created as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.GameObjectEvent.html": {
    "href": "api/SODD.Events.GameObjectEvent.html",
    "title": "Class GameObjectEvent | SODD Framework | 1.0.0",
    "keywords": "Class GameObjectEvent Namespace SODD.Events Represents a scriptable event that carries a GameObject payload. public sealed class GameObjectEvent : Event<GameObject>, IEvent<GameObject> Inheritance object Event<GameObject> GameObjectEvent Implements IEvent<GameObject> Inherited Members Event<GameObject>.AddListener(Action<GameObject>) Event<GameObject>.RemoveListener(Action<GameObject>) Event<GameObject>.Invoke(GameObject) Examples Below is an example demonstrating how to define and use a GameObjectEvent to manage an inventory system in a game: public class InventoryManager : MonoBehaviour { public GameObjectEvent onAddInventoryItem; // Assign this through the Unity Editor. public GameObjectEvent onRemoveInventoryItem; // Assign this through the Unity Editor. private List<GameObject> _inventory = new(); private void OnEnable() { onAddInventoryItem.AddListener(OnAddInventoryItem); onRemoveInventoryItem.AddListener(OnRemoveInventoryItem); } private void OnDisable() { onAddInventoryItem.RemoveListener(OnAddInventoryItem); onRemoveInventoryItem.RemoveListener(OnRemoveInventoryItem); } private void OnAddInventoryItem(GameObject item) { _inventory.Add(item); } private void OnRemoveInventoryItem(GameObject item) { _inventory.Remove(item); } } This example illustrates how the onAddInventoryItem and onRemoveInventoryItem events can be used to manage the items in the player's inventory, enabling the InventoryManager to react to changes without directly interacting with the game objects that trigger these changes. Remarks This class extends the generic Event<T> class, specifying GameObject as the type parameter. It is designed to handle events that involve GameObjects, such as spawning, transformations, or inventory management. Typical use cases include adding or removing items from an inventory, activating or deactivating game objects, or any scenario where GameObjects are manipulated dynamically during gameplay. This class can be created as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.GenericEvent-1.html": {
    "href": "api/SODD.Events.GenericEvent-1.html",
    "title": "Class GenericEvent<T> | SODD Framework | 1.0.0",
    "keywords": "Class GenericEvent<T> Namespace SODD.Events Represents a generic event that can be listened to and invoked. public sealed class GenericEvent<T> : IEvent<T> Type Parameters T The type of the event payload. Inheritance object GenericEvent<T> Implements IEvent<T> Methods AddListener(Action<T>) Adds a listener to the event. public void AddListener(Action<T> listener) Parameters listener Action<T> The listener to add. Remarks This method adds a listener to the event. The listener will be triggered whenever the event is invoked. Invoke(T) Invokes the event and notifies all registered listeners with the specified payload. public void Invoke(T payload) Parameters payload T The payload to pass to the listeners. RemoveListener(Action<T>) Removes the specified listener from the event. public void RemoveListener(Action<T> listener) Parameters listener Action<T> The listener to be removed."
  },
  "api/SODD.Events.IEvent-1.html": {
    "href": "api/SODD.Events.IEvent-1.html",
    "title": "Interface IEvent<T> | SODD Framework | 1.0.0",
    "keywords": "Interface IEvent<T> Namespace SODD.Events Defines a generic interface for events that can have listeners added or removed, and be invoked with a payload of type T. public interface IEvent<T> Type Parameters T The type of the event payload. This type parameter specifies the data type that listeners will receive when the event is invoked. Examples Example of defining a new event and subscribing a listener: // Define a new event with a string payload public class MyStringEvent : IEvent<string> { private event Action<string> listeners; public void AddListener(Action<string> listener) => listeners += listener; public void RemoveListener(Action<string> listener) => listeners -= listener; public void Invoke(string payload) => listeners?.Invoke(payload); } // Create an instance of the event MyStringEvent myEvent = new MyStringEvent(); // Define a listener method void MyEventListener(string message) { Debug.Log(message); } // Subscribe the listener to the event myEvent.AddListener(MyEventListener); // Invoke the event myEvent.Invoke(\"Hello, World!\"); This example will print \"Hello, World!\" to the console. Remarks The IEvent<T> interface serves as the foundation of the loosely coupled event system based on ScriptableObjects provided by the SODD Framework, from which all scriptable events implement. Listeners can subscribe to the event using AddListener(Action<T>) and unsubscribe using RemoveListener(Action<T>). The event can be triggered using the Invoke(T) method, which notifies all subscribed listeners, passing the specified payload to them. Usage of this interface promotes a pattern where components can react to specific game events, enhancing modularity and flexibility of the game's architecture. Methods AddListener(Action<T>) Subscribes a listener to the event, allowing it to be notified when the event is invoked. void AddListener(Action<T> listener) Parameters listener Action<T> The listener to add. It is a method that matches the signature of the Action<T> delegate, accepting a single parameter of type T. Invoke(T) Triggers the event, notifying all subscribed listeners and passing the specified payload to them. void Invoke(T payload) Parameters payload T The payload to pass to the listeners. RemoveListener(Action<T>) Unsubscribes a previously added listener from the event, preventing it from being notified when the event is invoked. void RemoveListener(Action<T> listener) Parameters listener Action<T> The listener to remove. It must be the same instance that was previously added with AddListener(Action<T>)."
  },
  "api/SODD.Events.IntEvent.html": {
    "href": "api/SODD.Events.IntEvent.html",
    "title": "Class IntEvent | SODD Framework | 1.0.0",
    "keywords": "Class IntEvent Namespace SODD.Events Represents a scriptable event that carries an integer payload. public sealed class IntEvent : Event<int>, IEvent<int> Inheritance object Event<int> IntEvent Implements IEvent<int> Inherited Members Event<int>.AddListener(Action<int>) Event<int>.RemoveListener(Action<int>) Event<int>.Invoke(int) Examples Below is an example demonstrating how to define and use an IntEvent to track changes in a game score: public class ScoreManager : MonoBehaviour { public IntEvent onUpdateScore; // Assign this through the Unity Editor. private int _score; private void OnEnable() { onScoreChanged.AddListener(OnUpdateScore); } private void OnDisable() { onScoreChanged.RemoveListener(OnUpdateScore); } private void OnUpdateScore(int increment) { _score += increment; } } This example shows a score manager that tracks and updates the player's score based on increments received through an event. Multiple components in the game, such as enemies when slain or coins when collected, can trigger this event to notify the need to increase the score without directly referencing the score manager. Remarks This class extends the generic Event<T> class, specifying int as the type parameter. It is commonly used to communicate numeric values, such as scores, health points, or other quantifiable game mechanics. Typical use cases include signaling changes in player scores, enemy health, or counting game items. This class enables events to be triggered with integer data, facilitating interaction between different components of the game without tight coupling. This class can be instantiated as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.StringEvent.html": {
    "href": "api/SODD.Events.StringEvent.html",
    "title": "Class StringEvent | SODD Framework | 1.0.0",
    "keywords": "Class StringEvent Namespace SODD.Events Represents a scriptable event that carries a string payload. public sealed class StringEvent : Event<string>, IEvent<string> Inheritance object Event<string> StringEvent Implements IEvent<string> Inherited Members Event<string>.AddListener(Action<string>) Event<string>.RemoveListener(Action<string>) Event<string>.Invoke(string) Examples Below is an example demonstrating how to define and use a StringEvent for displaying messages in a game's UI: public class UIManager : MonoBehaviour { public StringEvent onDisplayMessage; // Assign this through the Unity Editor. public UnityEngine.UI.Text messageText; // Assign this UI text element in the Unity Editor. private void OnEnable() { onDisplayMessage.AddListener(DisplayMessage); } private void OnDisable() { onDisplayMessage.RemoveListener(DisplayMessage); } private void DisplayMessage(string message) { messageText.text = message; } } This example shows how the onDisplayMessage event can be used to update a UI text element whenever a new message needs to be displayed. This approach decouples the UI update logic from the rest of the game logic, enhancing modularity and maintainability. Remarks This class extends the generic Event<T> class, specifying string as the type parameter. It is particularly useful for handling textual data within the game, such as user input, notifications, or dynamic text updates. Typical use cases include sending messages between systems, updating UI text elements, or logging debug information. This class can be created as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.Vector2Event.html": {
    "href": "api/SODD.Events.Vector2Event.html",
    "title": "Class Vector2Event | SODD Framework | 1.0.0",
    "keywords": "Class Vector2Event Namespace SODD.Events Represents a scriptable event that carries a Vector2 payload. public sealed class Vector2Event : Event<Vector2>, IEvent<Vector2> Inheritance object Event<Vector2> Vector2Event Implements IEvent<Vector2> Inherited Members Event<Vector2>.AddListener(Action<Vector2>) Event<Vector2>.RemoveListener(Action<Vector2>) Event<Vector2>.Invoke(Vector2) Examples Below is an example demonstrating how to use a Vector2Event for capturing and handling 2D player input in a game: using UnityEngine; using SODD.Events; public class PlayerController : MonoBehaviour { public Vector2Event onPlayerMove; // Assign this through the Unity Editor. private Vector2 _direction; private void OnEnable() { onPlayerMove.AddListener(OnPlayerMove); } private void OnDisable() { onPlayerMove.RemoveListener(OnPlayerMove); } private void FixedUpdate() { // Move player based on _direction } private void OnPlayerMove(Vector2 direction) { _direction = direction; } } This example shows how the onPlayerMove event can be used to read and respond to 2D movement inputs from the player. This method decouples input gathering from movement logic, allowing for more modular and easily maintainable code. Remarks This class extends the generic Event<T> class, specifying Vector2 as the type parameter. It is particularly useful for scenarios involving 2D vectors, such as player movement, touch inputs, or any other two-dimensional data transmission. Typical use cases include capturing player directional inputs, tracking touch gestures, or sending coordinates for game elements to react to. This class can be created as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.Vector3Event.html": {
    "href": "api/SODD.Events.Vector3Event.html",
    "title": "Class Vector3Event | SODD Framework | 1.0.0",
    "keywords": "Class Vector3Event Namespace SODD.Events Represents a scriptable event that carries a Vector3 payload. public sealed class Vector3Event : Event<Vector3>, IEvent<Vector3> Inheritance object Event<Vector3> Vector3Event Implements IEvent<Vector3> Inherited Members Event<Vector3>.AddListener(Action<Vector3>) Event<Vector3>.RemoveListener(Action<Vector3>) Event<Vector3>.Invoke(Vector3) Examples Below is an example demonstrating how to define and use a Vector3Event to manage particle spawning at specific 3D coordinates: public class ParticleSpawner : MonoBehaviour { public Vector3Event onSpawnParticles; // Assign this through the Unity Editor. public ParticleSystem particleSystem; // Assign your Particle System through the Unity Editor. private void OnEnable() { onSpawnParticles.AddListener(SpawnParticles); } private void OnDisable() { onSpawnParticles.RemoveListener(SpawnParticles); } private void SpawnParticles(Vector3 position) { particleSystem.transform.position = position; particleSystem.Emit(10); // Emit 10 particles at the given location } } This example shows how the onSpawnParticles event can be used to spawn particles at specific 3D coordinates received through the event, allowing for dynamic effects that are decoupled from the logic that triggers these effects. Remarks This class extends the generic Event<T> class, specifying Vector3 as the type parameter. It is ideal for scenarios involving three-dimensional vectors, such as spatial coordinates for moving objects, spawning items, or effects in 3D space. Typical use cases include determining spawn locations for characters or objects, tracking movement paths, or coordinating complex particle effects in response to game actions. This class can be created as a ScriptableObject asset directly from the Unity Editor."
  },
  "api/SODD.Events.VoidEvent.html": {
    "href": "api/SODD.Events.VoidEvent.html",
    "title": "Class VoidEvent | SODD Framework | 1.0.0",
    "keywords": "Class VoidEvent Namespace SODD.Events Represents a scriptable event that carries no payload. public sealed class VoidEvent : Event<Void>, IEvent<Void> Inheritance object Event<Void> VoidEvent Implements IEvent<Void> Inherited Members Event<Void>.AddListener(Action<Void>) Event<Void>.RemoveListener(Action<Void>) Event<Void>.Invoke(Void) Examples Below is an example demonstrating how to define and use a VoidEvent to trigger a level reset in a game: public class LevelManager : MonoBehaviour { public VoidEvent onLevelReset; // Assign this through the Unity Editor. private void OnEnable() { onLevelReset.AddListener(ResetLevel); } private void OnDisable() { onLevelReset.RemoveListener(ResetLevel); } private void ResetLevel() { // Add logic here to reset the level } } This example shows how the onLevelReset event can be used to initiate a level reset without needing to pass any specific data. This ensures that the action to reset can be easily triggered from multiple parts of the game without any dependencies on the event sender. Remarks This class extends the generic Event<T> class, specifying Void as the type parameter. It is ideal for situations where the occurrence of the event is important, but no data needs to be communicated. This class can be created as a ScriptableObject asset directly from the Unity Editor. Methods Invoke() public void Invoke()"
  },
  "api/SODD.Events.html": {
    "href": "api/SODD.Events.html",
    "title": "Namespace SODD.Events | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Events Classes BoolEvent Represents a scriptable event that carries a boolean payload. Event<T> Provides a generic base class for scriptable event implementations, enabling events to be defined with specific data types as payloads. FloatEvent Represents a scriptable event that carries a float payload. GameObjectEvent Represents a scriptable event that carries a GameObject payload. GenericEvent<T> Represents a generic event that can be listened to and invoked. IntEvent Represents a scriptable event that carries an integer payload. StringEvent Represents a scriptable event that carries a string payload. Vector2Event Represents a scriptable event that carries a Vector2 payload. Vector3Event Represents a scriptable event that carries a Vector3 payload. VoidEvent Represents a scriptable event that carries no payload. Interfaces IEvent<T> Defines a generic interface for events that can have listeners added or removed, and be invoked with a payload of type T."
  },
  "api/SODD.Input.ActionHandlers.BoolInputActionHandler.html": {
    "href": "api/SODD.Input.ActionHandlers.BoolInputActionHandler.html",
    "title": "Class BoolInputActionHandler | SODD Framework | 1.0.0",
    "keywords": "Class BoolInputActionHandler Namespace SODD.Input.ActionHandlers A ScriptableObject that handles input actions passing boolean data. public sealed class BoolInputActionHandler : InputActionHandler<bool> Inheritance object InputActionHandler<bool> BoolInputActionHandler Remarks The BoolInputActionHandler is designed to process boolean input actions, providing a structured and reusable way to react to button press or toggle events within Unity's Input System. This concrete implementation of InputActionHandler<T> offers specific overrides for the action started, performed, and canceled events, translating input action data to boolean values. Methods OnActionCanceled(CallbackContext) Called when the input action is canceled. protected override void OnActionCanceled(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionPerformed(CallbackContext) Called when the input action is performed. protected override void OnActionPerformed(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionStarted(CallbackContext) Called when the input action starts. protected override void OnActionStarted(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback."
  },
  "api/SODD.Input.ActionHandlers.FloatInputActionHandler.html": {
    "href": "api/SODD.Input.ActionHandlers.FloatInputActionHandler.html",
    "title": "Class FloatInputActionHandler | SODD Framework | 1.0.0",
    "keywords": "Class FloatInputActionHandler Namespace SODD.Input.ActionHandlers A ScriptableObject that handles input actions passing float data. public sealed class FloatInputActionHandler : InputActionHandler<float> Inheritance object InputActionHandler<float> FloatInputActionHandler Remarks The FloatInputActionHandler specializes in processing input actions that output float data, such as analog stick movement, trigger pressure, or any other input mechanism that generates a continuous range of values rather than discrete on/off signals. This handler is ideal for scenarios where the precise value of an input, within a defined range, influences the game's behavior. Examples include adjusting the speed of a character's movement based on analog stick deflection or modulating audio volume."
  },
  "api/SODD.Input.ActionHandlers.InputActionHandler-1.html": {
    "href": "api/SODD.Input.ActionHandlers.InputActionHandler-1.html",
    "title": "Class InputActionHandler<T> | SODD Framework | 1.0.0",
    "keywords": "Class InputActionHandler<T> Namespace SODD.Input.ActionHandlers Provides a base class for handling input actions and converting them into scriptable events. public abstract class InputActionHandler<T> : ScriptableObject where T : struct Type Parameters T The data type of the input value, defined by the input action being handled. Inheritance object InputActionHandler<T> Derived BoolInputActionHandler FloatInputActionHandler Vector2InputActionHandler Vector3InputActionHandler VoidInputActionHandler Examples Below is an example of how to create a concrete implementation of InputActionHandler<T> for handling Vector2 input actions, commonly used for 2D movement: [CreateAssetMenu(menuName = \"InputHandlers/Vector2InputActionHandler\")] public class Vector2InputActionHandler : InputActionHandler<Vector2> { // Override methods if needed for custom behavior upon input events. } In the Unity Editor, create an instance of this ScriptableObject and assign the input action reference along with any event subscribers to handle the input action events. Remarks This abstract class serves as the foundation for all input action handler implementations within the SODD Framework. It allows for the decoupling of input handling logic from game objects and components by translating the events provided by Unity's Input System into the SODD Framework's scriptable event system. This class listens to three phases of an input action—started, performed, and canceled—and invokes the corresponding scriptable events. To create custom input action handlers inherit from this class and specifying the appropriate type for T based on your input action's expected output. Then, assign input action references and connect event listeners to handle specific input events. Fields inputActionReference Reference to the InputAction to be handled. protected InputActionReference inputActionReference Field Value InputActionReference onActionCanceled Event triggered when the input action is canceled. protected Event<T> onActionCanceled Field Value Event<T> onActionPerformed Event triggered when the input action is performed. protected Event<T> onActionPerformed Field Value Event<T> onActionStarted Event triggered when the input action starts. protected Event<T> onActionStarted Field Value Event<T> Methods OnActionCanceled(CallbackContext) Called when the input action is canceled. protected virtual void OnActionCanceled(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionPerformed(CallbackContext) Called when the input action is performed. protected virtual void OnActionPerformed(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionStarted(CallbackContext) Called when the input action starts. protected virtual void OnActionStarted(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. See Also Event<T>"
  },
  "api/SODD.Input.ActionHandlers.Vector2InputActionHandler.html": {
    "href": "api/SODD.Input.ActionHandlers.Vector2InputActionHandler.html",
    "title": "Class Vector2InputActionHandler | SODD Framework | 1.0.0",
    "keywords": "Class Vector2InputActionHandler Namespace SODD.Input.ActionHandlers A ScriptableObject that handles input actions producing Vector2 values. public sealed class Vector2InputActionHandler : InputActionHandler<Vector2> Inheritance object InputActionHandler<Vector2> Vector2InputActionHandler Remarks The Vector2InputActionHandler is optimized for input actions where the output is a two-dimensional vector, such as directional inputs from a joystick or touchpad. Typical use cases include controlling character movement, camera panning, or any scenario requiring directional input."
  },
  "api/SODD.Input.ActionHandlers.Vector3InputActionHandler.html": {
    "href": "api/SODD.Input.ActionHandlers.Vector3InputActionHandler.html",
    "title": "Class Vector3InputActionHandler | SODD Framework | 1.0.0",
    "keywords": "Class Vector3InputActionHandler Namespace SODD.Input.ActionHandlers Handles input actions that provide Vector3 data. public sealed class Vector3InputActionHandler : InputActionHandler<Vector3> Inheritance object InputActionHandler<Vector3> Vector3InputActionHandler Remarks This class extends InputActionHandler<T> to specifically handle input actions that output Vector3 data, such as 3D spatial movements or directional inputs. It is ideal for applications requiring precise control over 3D space, such as camera controls, character movement, or object manipulation. Subscribers can listen to the events raised by this handler to react to the start, performance, or cancellation of the input action with Vector3 data."
  },
  "api/SODD.Input.ActionHandlers.VoidInputActionHandler.html": {
    "href": "api/SODD.Input.ActionHandlers.VoidInputActionHandler.html",
    "title": "Class VoidInputActionHandler | SODD Framework | 1.0.0",
    "keywords": "Class VoidInputActionHandler Namespace SODD.Input.ActionHandlers A ScriptableObject that handles input actions that do not pass data. public sealed class VoidInputActionHandler : InputActionHandler<Void> Inheritance object InputActionHandler<Void> VoidInputActionHandler Remarks The VoidInputActionHandler is designed for input actions where the action itself is significant, but the action's data is not. This is common in scenarios such as button presses where the timing and occurrence of the action are important, but the action does not carry additional data (e.g., a jump or confirm button press). This handler triggers events for the started, performed, and canceled phases of an input action, using a Void type as payload to signify the absence of specific data. This approach maintains consistency with the InputActionHandler system while accommodating actions that do not require data. Methods OnActionCanceled(CallbackContext) Called when the input action is canceled. protected override void OnActionCanceled(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionPerformed(CallbackContext) Called when the input action is performed. protected override void OnActionPerformed(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback. OnActionStarted(CallbackContext) Called when the input action starts. protected override void OnActionStarted(InputAction.CallbackContext context) Parameters context CallbackContext Context of the input action callback."
  },
  "api/SODD.Input.ActionHandlers.html": {
    "href": "api/SODD.Input.ActionHandlers.html",
    "title": "Namespace SODD.Input.ActionHandlers | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Input.ActionHandlers Classes BoolInputActionHandler A ScriptableObject that handles input actions passing boolean data. FloatInputActionHandler A ScriptableObject that handles input actions passing float data. InputActionHandler<T> Provides a base class for handling input actions and converting them into scriptable events. Vector2InputActionHandler A ScriptableObject that handles input actions producing Vector2 values. Vector3InputActionHandler Handles input actions that provide Vector3 data. VoidInputActionHandler A ScriptableObject that handles input actions that do not pass data."
  },
  "api/SODD.Listeners.BoolEventListener.html": {
    "href": "api/SODD.Listeners.BoolEventListener.html",
    "title": "Class BoolEventListener | SODD Framework | 1.0.0",
    "keywords": "Class BoolEventListener Namespace SODD.Listeners Represents an event listener for boolean events. public class BoolEventListener : EventListener<bool>, IEventListener<bool> Inheritance object EventListener<bool> BoolEventListener Implements IEventListener<bool> Inherited Members EventListener<bool>.targetEvent EventListener<bool>.onEventInvoked EventListener<bool>.StartListening(IEvent<bool>) EventListener<bool>.StopListening(IEvent<bool>) EventListener<bool>.OnEventInvoked(bool)"
  },
  "api/SODD.Listeners.EventListener-1.html": {
    "href": "api/SODD.Listeners.EventListener-1.html",
    "title": "Class EventListener<T> | SODD Framework | 1.0.0",
    "keywords": "Class EventListener<T> Namespace SODD.Listeners Represents an abstract component that listens for events of a specific type T and triggers UnityEvents in response. public abstract class EventListener<T> : MonoBehaviour, IEventListener<T> Type Parameters T The type of the event payload. Inheritance object EventListener<T> Implements IEventListener<T> Derived BoolEventListener FloatEventListener GameObjectEventListener IntEventListener StringEventListener Vector2EventListener Vector3EventListener VoidEventListener Examples A StringEvent Listener implementation would look like this: public class StringEventListener : EventListener<string> {} Remarks This abstract class provides a foundation for creating scriptable event listeners. It implements the IEventListener<T> interface and inherits the MonoBehaviour class, simplifying the process of subscribing to and unsubscribing from events based on the MonoBehaviour's lifecycle, ensuring that listeners are only active when the MonoBehaviour is enabled. To create a custom event listener, inherit from this class and specify the payload type T, it can be any valid Unity type (e.g., int, string, GameObject, etc.). In the Unity Editor, attach your new custom event listener component to a GameObject, assign the specific scriptable event to listen to and configure the response through the exposed UnityEvent onEventInvoked. Fields onEventInvoked protected UnityEvent<T> onEventInvoked Field Value UnityEvent<T> targetEvent protected Event<T> targetEvent Field Value Event<T> Methods OnEventInvoked(T) Called when the event is invoked, triggering the assigned UnityEvent. public void OnEventInvoked(T payload) Parameters payload T The payload passed to the event. StartListening(IEvent<T>) Subscribes to the target event. public void StartListening(IEvent<T> @event) Parameters event IEvent<T> The event to start listening to. StopListening(IEvent<T>) Unsubscribes from the target event. public void StopListening(IEvent<T> @event) Parameters event IEvent<T> The event to stop listening to. See Also IEventListener<T> Event<T> IEvent<T>"
  },
  "api/SODD.Listeners.FloatEventListener.html": {
    "href": "api/SODD.Listeners.FloatEventListener.html",
    "title": "Class FloatEventListener | SODD Framework | 1.0.0",
    "keywords": "Class FloatEventListener Namespace SODD.Listeners Represents an event listener for float events. public class FloatEventListener : EventListener<float>, IEventListener<float> Inheritance object EventListener<float> FloatEventListener Implements IEventListener<float> Inherited Members EventListener<float>.targetEvent EventListener<float>.onEventInvoked EventListener<float>.StartListening(IEvent<float>) EventListener<float>.StopListening(IEvent<float>) EventListener<float>.OnEventInvoked(float)"
  },
  "api/SODD.Listeners.GameObjectEventListener.html": {
    "href": "api/SODD.Listeners.GameObjectEventListener.html",
    "title": "Class GameObjectEventListener | SODD Framework | 1.0.0",
    "keywords": "Class GameObjectEventListener Namespace SODD.Listeners Represents an event listener for GameObject events. public class GameObjectEventListener : EventListener<GameObject>, IEventListener<GameObject> Inheritance object EventListener<GameObject> GameObjectEventListener Implements IEventListener<GameObject> Inherited Members EventListener<GameObject>.targetEvent EventListener<GameObject>.onEventInvoked EventListener<GameObject>.StartListening(IEvent<GameObject>) EventListener<GameObject>.StopListening(IEvent<GameObject>) EventListener<GameObject>.OnEventInvoked(GameObject)"
  },
  "api/SODD.Listeners.IEventListener-1.html": {
    "href": "api/SODD.Listeners.IEventListener-1.html",
    "title": "Interface IEventListener<T> | SODD Framework | 1.0.0",
    "keywords": "Interface IEventListener<T> Namespace SODD.Listeners Represents a listener for an event of type T. public interface IEventListener<T> Type Parameters T The type of the event payload. Methods OnEventInvoked(T) Defines a method that is called when an event is invoked. void OnEventInvoked(T payload) Parameters payload T The payload passed to the event. StartListening(IEvent<T>) Starts listening to the specified event by adding the supplied event listener. void StartListening(IEvent<T> @event) Parameters event IEvent<T> The event to listen to. Remarks This method adds the OnEventInvoked(T) method as a listener to the specified event, which will be invoked whenever the event is triggered. StopListening(IEvent<T>) Stops listening to an event. void StopListening(IEvent<T> @event) Parameters event IEvent<T> The event to stop listening to."
  },
  "api/SODD.Listeners.IntEventListener.html": {
    "href": "api/SODD.Listeners.IntEventListener.html",
    "title": "Class IntEventListener | SODD Framework | 1.0.0",
    "keywords": "Class IntEventListener Namespace SODD.Listeners Represents an event listener for integer events. public class IntEventListener : EventListener<int>, IEventListener<int> Inheritance object EventListener<int> IntEventListener Implements IEventListener<int> Inherited Members EventListener<int>.targetEvent EventListener<int>.onEventInvoked EventListener<int>.StartListening(IEvent<int>) EventListener<int>.StopListening(IEvent<int>) EventListener<int>.OnEventInvoked(int)"
  },
  "api/SODD.Listeners.StringEventListener.html": {
    "href": "api/SODD.Listeners.StringEventListener.html",
    "title": "Class StringEventListener | SODD Framework | 1.0.0",
    "keywords": "Class StringEventListener Namespace SODD.Listeners Represents an event listener for string events. public class StringEventListener : EventListener<string>, IEventListener<string> Inheritance object EventListener<string> StringEventListener Implements IEventListener<string> Inherited Members EventListener<string>.targetEvent EventListener<string>.onEventInvoked EventListener<string>.StartListening(IEvent<string>) EventListener<string>.StopListening(IEvent<string>) EventListener<string>.OnEventInvoked(string)"
  },
  "api/SODD.Listeners.Vector2EventListener.html": {
    "href": "api/SODD.Listeners.Vector2EventListener.html",
    "title": "Class Vector2EventListener | SODD Framework | 1.0.0",
    "keywords": "Class Vector2EventListener Namespace SODD.Listeners Represents an event listener for Vector2 events. public class Vector2EventListener : EventListener<Vector2>, IEventListener<Vector2> Inheritance object EventListener<Vector2> Vector2EventListener Implements IEventListener<Vector2> Inherited Members EventListener<Vector2>.targetEvent EventListener<Vector2>.onEventInvoked EventListener<Vector2>.StartListening(IEvent<Vector2>) EventListener<Vector2>.StopListening(IEvent<Vector2>) EventListener<Vector2>.OnEventInvoked(Vector2)"
  },
  "api/SODD.Listeners.Vector3EventListener.html": {
    "href": "api/SODD.Listeners.Vector3EventListener.html",
    "title": "Class Vector3EventListener | SODD Framework | 1.0.0",
    "keywords": "Class Vector3EventListener Namespace SODD.Listeners Represents an event listener for Vector3 events. public class Vector3EventListener : EventListener<Vector3>, IEventListener<Vector3> Inheritance object EventListener<Vector3> Vector3EventListener Implements IEventListener<Vector3> Inherited Members EventListener<Vector3>.targetEvent EventListener<Vector3>.onEventInvoked EventListener<Vector3>.StartListening(IEvent<Vector3>) EventListener<Vector3>.StopListening(IEvent<Vector3>) EventListener<Vector3>.OnEventInvoked(Vector3)"
  },
  "api/SODD.Listeners.VoidEventListener.html": {
    "href": "api/SODD.Listeners.VoidEventListener.html",
    "title": "Class VoidEventListener | SODD Framework | 1.0.0",
    "keywords": "Class VoidEventListener Namespace SODD.Listeners Represents an event listener for void events. public class VoidEventListener : EventListener<Void>, IEventListener<Void> Inheritance object EventListener<Void> VoidEventListener Implements IEventListener<Void> Inherited Members EventListener<Void>.targetEvent EventListener<Void>.onEventInvoked EventListener<Void>.StartListening(IEvent<Void>) EventListener<Void>.StopListening(IEvent<Void>) EventListener<Void>.OnEventInvoked(Void)"
  },
  "api/SODD.Listeners.html": {
    "href": "api/SODD.Listeners.html",
    "title": "Namespace SODD.Listeners | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Listeners Classes BoolEventListener Represents an event listener for boolean events. EventListener<T> Represents an abstract component that listens for events of a specific type T and triggers UnityEvents in response. FloatEventListener Represents an event listener for float events. GameObjectEventListener Represents an event listener for GameObject events. IntEventListener Represents an event listener for integer events. StringEventListener Represents an event listener for string events. Vector2EventListener Represents an event listener for Vector2 events. Vector3EventListener Represents an event listener for Vector3 events. VoidEventListener Represents an event listener for void events. Interfaces IEventListener<T> Represents a listener for an event of type T."
  },
  "api/SODD.Variables.BoolVariable.html": {
    "href": "api/SODD.Variables.BoolVariable.html",
    "title": "Class BoolVariable | SODD Framework | 1.0.0",
    "keywords": "Class BoolVariable Namespace SODD.Variables A ScriptableObject representing a boolean variable. public class BoolVariable : Variable<bool>, IVariable, IVariable<bool> Inheritance object Variable<bool> BoolVariable Implements IVariable IVariable<bool> Inherited Members Variable<bool>.value Variable<bool>.readOnly Variable<bool>.OnValueChanged Variable<bool>.Value Variable<bool>.HandleValueChange() Remarks The BoolVariable class is a specialized implementation of the Variable class for boolean (true/false) values. It facilitates the creation and management of a boolean value that can be shared across different components and scripts within a Unity project, allowing for a centralized approach to handling binary states. This class can be used to create boolean variables directly in the Unity Editor. These variables are ideal for toggling states, managing conditions, or controlling binary features such as switches or flags in game mechanics. The boolean value can be marked as read-only to prevent runtime modifications. Additionally, the class emits an event whenever the value changes, providing the capability to react dynamically to state changes."
  },
  "api/SODD.Variables.FloatVariable.html": {
    "href": "api/SODD.Variables.FloatVariable.html",
    "title": "Class FloatVariable | SODD Framework | 1.0.0",
    "keywords": "Class FloatVariable Namespace SODD.Variables A ScriptableObject representing a floating-point number variable. public class FloatVariable : Variable<float>, IVariable, IVariable<float> Inheritance object Variable<float> FloatVariable Implements IVariable IVariable<float> Inherited Members Variable<float>.value Variable<float>.readOnly Variable<float>.OnValueChanged Variable<float>.Value Variable<float>.HandleValueChange() Remarks The FloatVariable class is a specialized implementation of the Variable class for float values. It is designed to hold a floating-point number that can be shared across different components and scripts in a Unity project, allowing for centralized management of float data. This class can be used to create float variables directly in the Unity Editor. These variables can be utilized for a range of purposes such as tracking dynamic numerical values like health points, speed, percentages, or any other measurements that require floating-point precision. The float value can be set as read-only to prevent changes at runtime, maintaining data integrity. The class also emits an event whenever the value changes, enabling other scripts to respond dynamically to these changes."
  },
  "api/SODD.Variables.GameObjectVariable.html": {
    "href": "api/SODD.Variables.GameObjectVariable.html",
    "title": "Class GameObjectVariable | SODD Framework | 1.0.0",
    "keywords": "Class GameObjectVariable Namespace SODD.Variables A ScriptableObject representing a GameObject variable. public class GameObjectVariable : Variable<GameObject>, IVariable, IVariable<GameObject> Inheritance object Variable<GameObject> GameObjectVariable Implements IVariable IVariable<GameObject> Inherited Members Variable<GameObject>.value Variable<GameObject>.readOnly Variable<GameObject>.OnValueChanged Variable<GameObject>.Value Variable<GameObject>.HandleValueChange() Remarks The GameObjectVariable class is a specialized implementation of the Variable class for GameObject values. It is designed to hold a GameObject value that can be shared across different components and scripts in a Unity project, allowing for centralized management of GameObject data. This class can be used to create GameObject variables directly in the Unity Editor. These variables can be utilized for a range of purposes such as storing references to key GameObjects, controlling object behavior, or any other interactions that may need to be dynamically changed or referenced during gameplay. The GameObject value can be set as read-only to prevent changes at runtime, ensuring the consistency of object interactions. The class also emits an event whenever the value changes, enabling other scripts to react dynamically to GameObject updates."
  },
  "api/SODD.Variables.IVariable-1.html": {
    "href": "api/SODD.Variables.IVariable-1.html",
    "title": "Interface IVariable<T> | SODD Framework | 1.0.0",
    "keywords": "Interface IVariable<T> Namespace SODD.Variables Represents a generic variable interface with a specific type. public interface IVariable<T> Type Parameters T The type of the variable's value. Remarks This interface defines a generic variable with a specific type, allowing for the creation of type-safe variables. It's used to encapsulate data that can be exposed and manipulated within the Unity Editor and through scripts. Properties Value Gets or sets the value of the variable. T Value { get; set; } Property Value T The value of the variable, of type T."
  },
  "api/SODD.Variables.IVariable.html": {
    "href": "api/SODD.Variables.IVariable.html",
    "title": "Interface IVariable | SODD Framework | 1.0.0",
    "keywords": "Interface IVariable Namespace SODD.Variables Represents a generic variable interface for type-agnostic variable usage. public interface IVariable Remarks This interface allows for handling variables whose type might not be known at compile time or when it is necessary to operate on variables in a type-agnostic manner. It can be used in scenarios where variables are managed dynamically, such as in systems that load or save settings where the types can vary. Properties Value Gets or sets the value of the variable. object Value { get; set; } Property Value object The value of the variable, stored as an object."
  },
  "api/SODD.Variables.IntVariable.html": {
    "href": "api/SODD.Variables.IntVariable.html",
    "title": "Class IntVariable | SODD Framework | 1.0.0",
    "keywords": "Class IntVariable Namespace SODD.Variables A ScriptableObject representing an integer variable. public class IntVariable : Variable<int>, IVariable, IVariable<int> Inheritance object Variable<int> IntVariable Implements IVariable IVariable<int> Inherited Members Variable<int>.value Variable<int>.readOnly Variable<int>.OnValueChanged Variable<int>.Value Variable<int>.HandleValueChange() Remarks The IntVariable class is a specialized implementation of the Variable class for integer values. It is designed to hold an integer value that can be shared across different components and scripts in a Unity project, allowing for centralized management of integer data. This class can be used to create integer variables directly in the Unity Editor. These variables can be used for various purposes such as keeping track of scores, counts, or other numerical game-related data that require integer representation. The integer value can be set as read-only to prevent changes at runtime, ensuring data integrity. The class also emits an event whenever the value changes, allowing other scripts to react to these changes."
  },
  "api/SODD.Variables.LayerMaskVariable.html": {
    "href": "api/SODD.Variables.LayerMaskVariable.html",
    "title": "Class LayerMaskVariable | SODD Framework | 1.0.0",
    "keywords": "Class LayerMaskVariable Namespace SODD.Variables A ScriptableObject representing a LayerMask variable. public class LayerMaskVariable : Variable<LayerMask>, IVariable, IVariable<LayerMask> Inheritance object Variable<LayerMask> LayerMaskVariable Implements IVariable IVariable<LayerMask> Inherited Members Variable<LayerMask>.value Variable<LayerMask>.readOnly Variable<LayerMask>.OnValueChanged Variable<LayerMask>.Value Variable<LayerMask>.HandleValueChange() Remarks The LayerMaskVariable class is a specialized implementation of the Variable class for LayerMask values. It is designed to hold a LayerMask value that can be shared across different components and scripts in a Unity project, allowing for centralized management of LayerMask data. This class can be used to create LayerMask variables directly in the Unity Editor. These variables can be utilized for a range of purposes such as setting certain layers to interact or not interact with others, managing collision detection, or any other game rules that may need to be dynamically changed or referenced during gameplay. The LayerMask value can be set as read-only to prevent changes at runtime, ensuring the consistency of layer rules. The class also emits an event whenever the value changes, enabling other scripts to react dynamically to LayerMask updates."
  },
  "api/SODD.Variables.StringVariable.html": {
    "href": "api/SODD.Variables.StringVariable.html",
    "title": "Class StringVariable | SODD Framework | 1.0.0",
    "keywords": "Class StringVariable Namespace SODD.Variables A ScriptableObject representing a string variable. public class StringVariable : Variable<string>, IVariable, IVariable<string> Inheritance object Variable<string> StringVariable Implements IVariable IVariable<string> Inherited Members Variable<string>.value Variable<string>.readOnly Variable<string>.OnValueChanged Variable<string>.Value Variable<string>.HandleValueChange() Remarks The StringVariable class is a specialized implementation of the Variable class for string values. It is designed to hold a string value that can be shared across different components and scripts in a Unity project, allowing for centralized management of string data. This class can be used to create string variables directly in the Unity Editor. These variables can be utilized for a range of purposes such as storing text for UI elements, dialogue, descriptions, or any other textual content that may need to be dynamically changed or referenced during gameplay. The string value can be set as read-only to prevent changes at runtime, ensuring the integrity of the textual content. The class also emits an event whenever the value changes, enabling other scripts to react dynamically to text updates."
  },
  "api/SODD.Variables.Variable-1.html": {
    "href": "api/SODD.Variables.Variable-1.html",
    "title": "Class Variable<T> | SODD Framework | 1.0.0",
    "keywords": "Class Variable<T> Namespace SODD.Variables Represents an abstract variable of type T. public abstract class Variable<T> : ScriptableObject, IVariable, IVariable<T> Type Parameters T The type of the variable. Inheritance object Variable<T> Implements IVariable IVariable<T> Derived BoolVariable FloatVariable GameObjectVariable IntVariable LayerMaskVariable StringVariable Vector2Variable Vector3Variable Examples Example of an IntVariable implementation: [CreateAssetMenu(menuName = \"My Variables/Int Variable\", fileName = nameof(StringVariable))] public class IntVariable : Variable<int> {} Remarks This abstract class serves as the base for all scriptable variable implementations. It implements the IVariable<T> interface allowing the creation of data containers that can be easily manipulated within the Unity Editor and referenced across different scripts, making it useful for a wide range of applications, such as game settings, runtime configurations, or shared data across different game components. The value of the variable can be marked as read-only to prevent modification at runtime. Additionally, the class provides an event, OnValueChanged, which is invoked whenever the value of the variable is changed, allowing for reactive programming patterns. To create custom scriptable variable, inherit from this class and specify the payload type T, it can be any valid Unity type (e.g., int, string, GameObject, etc.). Fields OnValueChanged An event that is triggered whenever the value of the variable changes. public readonly GenericEvent<T> OnValueChanged Field Value GenericEvent<T> readOnly protected bool readOnly Field Value bool value [OnValueChangedAttribute] protected T value Field Value T Properties Value Gets or sets the value of the variable. public T Value { get; set; } Property Value T The current value of the variable. Methods HandleValueChange() Invokes the OnValueChanged event and can log the change if debugging is enabled. protected void HandleValueChange()"
  },
  "api/SODD.Variables.Vector2Variable.html": {
    "href": "api/SODD.Variables.Vector2Variable.html",
    "title": "Class Vector2Variable | SODD Framework | 1.0.0",
    "keywords": "Class Vector2Variable Namespace SODD.Variables A ScriptableObject representing a Vector2 variable. public class Vector2Variable : Variable<Vector2>, IVariable, IVariable<Vector2> Inheritance object Variable<Vector2> Vector2Variable Implements IVariable IVariable<Vector2> Inherited Members Variable<Vector2>.value Variable<Vector2>.readOnly Variable<Vector2>.OnValueChanged Variable<Vector2>.Value Variable<Vector2>.HandleValueChange() Remarks The Vector2Variable class is a specialized implementation of the Variable class for Vector2 values. It is designed to hold a two-dimensional vector that can be shared across different components and scripts in a Unity project, allowing for centralized management of Vector2 data. This class can be used to create Vector2 variables directly in the Unity Editor. These variables can be utilized for various purposes, such as tracking positions, velocities, or other 2D vector-related data within your game or application. The Vector2 value can be set as read-only to prevent changes at runtime, ensuring the integrity of the data. The class also emits an event whenever the value changes, enabling other scripts to react dynamically to Vector2 data updates."
  },
  "api/SODD.Variables.Vector3Variable.html": {
    "href": "api/SODD.Variables.Vector3Variable.html",
    "title": "Class Vector3Variable | SODD Framework | 1.0.0",
    "keywords": "Class Vector3Variable Namespace SODD.Variables A ScriptableObject representing a Vector3 variable. public class Vector3Variable : Variable<Vector3>, IVariable, IVariable<Vector3> Inheritance object Variable<Vector3> Vector3Variable Implements IVariable IVariable<Vector3> Inherited Members Variable<Vector3>.value Variable<Vector3>.readOnly Variable<Vector3>.OnValueChanged Variable<Vector3>.Value Variable<Vector3>.HandleValueChange() Remarks The Vector3Variable class is a specialized implementation of the Variable class for Vector3 values. It is designed to hold a three-dimensional vector that can be shared across different components and scripts in a Unity project, allowing for centralized management of Vector3 data. This class can be used to create Vector3 variables directly in the Unity Editor. These variables can be utilized for various purposes, such as tracking positions, velocities, directions, or other 3D vector-related data within your game or application. The Vector3 value can be set as read-only to prevent changes at runtime, ensuring the integrity of the data. The class also emits an event whenever the value changes, enabling other scripts to react dynamically to Vector3 data updates."
  },
  "api/SODD.Variables.html": {
    "href": "api/SODD.Variables.html",
    "title": "Namespace SODD.Variables | SODD Framework | 1.0.0",
    "keywords": "Namespace SODD.Variables Classes BoolVariable A ScriptableObject representing a boolean variable. FloatVariable A ScriptableObject representing a floating-point number variable. GameObjectVariable A ScriptableObject representing a GameObject variable. IntVariable A ScriptableObject representing an integer variable. LayerMaskVariable A ScriptableObject representing a LayerMask variable. StringVariable A ScriptableObject representing a string variable. Variable<T> Represents an abstract variable of type T. Vector2Variable A ScriptableObject representing a Vector2 variable. Vector3Variable A ScriptableObject representing a Vector3 variable. Interfaces IVariable Represents a generic variable interface for type-agnostic variable usage. IVariable<T> Represents a generic variable interface with a specific type."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| SODD Framework | 1.0.0",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "1.0.0 (2024-03-02) | SODD Framework | 1.0.0",
    "keywords": "1.0.0 (2024-03-02) Features add EditorHelper and Framework classes (d494a8c) add icons for events, listeners, variables, collections and action handlers (f3a67f5) attributes: add OnValueChanged attribute (5d19606) collections: add abstract Collection class for scriptable collections (adc4fd6) collections: add AudioClipCollection (42ceb3c) collections: add ComponentCollection (dc22ba6) collections: add GameObjectCollection (a4fb546) collections: add ObjectCollection (1a6e6bc) collections: add ScriptableObjectCollection (6c5abc2) editor: update event attributes and add EventEditor (e0aa829) events: add abstract Event class for scriptable events (dbe9d5a) events: add BoolEvent (11a1cea) events: add EventListener abstract class (b5d6ba7) events: add FloatEvent (466d076) events: add GameObjectEvent (43c52fc) events: add IEvent interface (fe6d844) events: add IEventListener interface (4a227ce) events: add IntEvent (e8cea71) events: add StringEvent (87f09f6) events: add StringEventListener (28fd932) events: add Vector2Event (0c73d3f) events: add Vector3Event (4f26d89) events: add VoidEvent (49ff349) input: add abstract InputActionHandler class for scriptable action handlers (cb7a9a0) input: add BoolInputActionHandler (d5f8d72) input: add FloatInputActionHandler (3ccde51) input: add Vector2InputActionHandler (4502560) input: add Vector3InputActionHandler (f6ce12a) input: add VoidInputActionHandler (045ea1b) listeners: add BoolEventListener (2406b04) listeners: add FloatEventListener (c967cfe) listeners: add GameObjectEventListener (115aeeb) listeners: add IntEventListener (e80bf48) listeners: add Vector2EventListener (d077d86) listeners: add Vector3EventListener (efbd266) listeners: add VoidEventListener (2075494) variables: add abstract Variable class for scriptable variables (fbb8385) variables: add BoolVariable (4bb16dd) variables: add FloatVariable (52cae6a) variables: add GameObjectVariable (2eec78a) variables: add generic variable interfaces (f40e4ac) variables: add IntVariable (6e7b453) variables: add LayerMaskVariable (5cf5f30) variables: add StringVariable (ab24b07) variables: add Vector2Variable (2fa92a3) variables: add Vector3Variable (c5e3094) BREAKING CHANGES input: Unity.InputSystem is now a package dependency Signed-off-by: Alex Ruiz a.ruiz.rabasseda@gmail.com"
  },
  "index.html": {
    "href": "index.html",
    "title": "| SODD Framework | 1.0.0",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| SODD Framework | 1.0.0",
    "keywords": "MIT License Copyright (c) 2024 Alex Ruiz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "| SODD Framework | 1.0.0",
    "keywords": "A framework for architecturing your games with ScriptableObjects. Explore the docs » About Unity developers often face challenges related to dependency management and interactions between systems within their projects. These issues, if not addressed adequately, can lead to complex and rigid game structures, hindering scalability and maintainability. It is in this context that Ryan Hipple, principal engineer of Schell Games, introduces in the Unite Austin conference of 2017 a novel approach to game development employing ScriptableObjects. Hipple’s proposal advocates for a more modular and manageable game architecture in Unity, harnessing the potential of ScriptableObjects to mitigate common development challenges. SODD Framework aims to provide a comprehensive and practical implementation of Hipple’s proposal towards a development methodology based on Scriptable Objects, which can be termed as ScriptableObject Driven Development (SODD). The significance of this framework lies in implementing and expanding the fundamental principles of modularity, editability and debuggability introduced by Hipple’s game architecture with ScriptableObjects. The envisioned outcome is a robust tool that enhances productivity and collaboration in Unity’s development environment. Getting started To start using SODD Framework in your Unity project go to your package manager, click on add package from git URL, and paste the following URL: https://github.com/aruizrab/sodd-unity-framework.git"
  }
}